#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class product_info(object):
    """
    商品基本信息

    Attributes:
     - pid
     - discount_rate
     - bid
     - cid
     - source_of_supply
     - degree
     - is_promotion
     - original_price
     - sale_price
     - discount_price
     - is_blackcard_member
     - os
     - status
    """


    def __init__(self, pid=None, discount_rate=None, bid=None, cid=None, source_of_supply=None, degree=None, is_promotion=None, original_price=None, sale_price=None, discount_price=None, is_blackcard_member=None, os=None, status=None,):
        self.pid = pid
        self.discount_rate = discount_rate
        self.bid = bid
        self.cid = cid
        self.source_of_supply = source_of_supply
        self.degree = degree
        self.is_promotion = is_promotion
        self.original_price = original_price
        self.sale_price = sale_price
        self.discount_price = discount_price
        self.is_blackcard_member = is_blackcard_member
        self.os = os
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.discount_rate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.bid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.source_of_supply = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.degree = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.is_promotion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.original_price = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.sale_price = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.discount_price = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.is_blackcard_member = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.os = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('product_info')
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.STRING, 1)
            oprot.writeString(self.pid.encode('utf-8') if sys.version_info[0] == 2 else self.pid)
            oprot.writeFieldEnd()
        if self.discount_rate is not None:
            oprot.writeFieldBegin('discount_rate', TType.STRING, 2)
            oprot.writeString(self.discount_rate.encode('utf-8') if sys.version_info[0] == 2 else self.discount_rate)
            oprot.writeFieldEnd()
        if self.bid is not None:
            oprot.writeFieldBegin('bid', TType.STRING, 3)
            oprot.writeString(self.bid.encode('utf-8') if sys.version_info[0] == 2 else self.bid)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 4)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        if self.source_of_supply is not None:
            oprot.writeFieldBegin('source_of_supply', TType.STRING, 5)
            oprot.writeString(self.source_of_supply.encode('utf-8') if sys.version_info[0] == 2 else self.source_of_supply)
            oprot.writeFieldEnd()
        if self.degree is not None:
            oprot.writeFieldBegin('degree', TType.STRING, 6)
            oprot.writeString(self.degree.encode('utf-8') if sys.version_info[0] == 2 else self.degree)
            oprot.writeFieldEnd()
        if self.is_promotion is not None:
            oprot.writeFieldBegin('is_promotion', TType.STRING, 7)
            oprot.writeString(self.is_promotion.encode('utf-8') if sys.version_info[0] == 2 else self.is_promotion)
            oprot.writeFieldEnd()
        if self.original_price is not None:
            oprot.writeFieldBegin('original_price', TType.STRING, 8)
            oprot.writeString(self.original_price.encode('utf-8') if sys.version_info[0] == 2 else self.original_price)
            oprot.writeFieldEnd()
        if self.sale_price is not None:
            oprot.writeFieldBegin('sale_price', TType.STRING, 9)
            oprot.writeString(self.sale_price.encode('utf-8') if sys.version_info[0] == 2 else self.sale_price)
            oprot.writeFieldEnd()
        if self.discount_price is not None:
            oprot.writeFieldBegin('discount_price', TType.STRING, 10)
            oprot.writeString(self.discount_price.encode('utf-8') if sys.version_info[0] == 2 else self.discount_price)
            oprot.writeFieldEnd()
        if self.is_blackcard_member is not None:
            oprot.writeFieldBegin('is_blackcard_member', TType.STRING, 11)
            oprot.writeString(self.is_blackcard_member.encode('utf-8') if sys.version_info[0] == 2 else self.is_blackcard_member)
            oprot.writeFieldEnd()
        if self.os is not None:
            oprot.writeFieldBegin('os', TType.STRING, 12)
            oprot.writeString(self.os.encode('utf-8') if sys.version_info[0] == 2 else self.os)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 13)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CtrResponse(object):
    """
    Attributes:
     - success
     - message
     - pid
     - weight
    """


    def __init__(self, success=None, message=None, pid=None, weight=None,):
        self.success = success
        self.message = message
        self.pid = pid
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CtrResponse')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.STRING, 3)
            oprot.writeString(self.pid.encode('utf-8') if sys.version_info[0] == 2 else self.pid)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 4)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(product_info)
product_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'discount_rate', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'bid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'cid', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'source_of_supply', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'degree', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'is_promotion', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'original_price', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'sale_price', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'discount_price', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'is_blackcard_member', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'os', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'status', 'UTF8', None, ),  # 13
)
all_structs.append(CtrResponse)
CtrResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pid', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'weight', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
